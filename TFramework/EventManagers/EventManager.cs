using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using TFramework.Singleton;

namespace TFramework.EventManager
{
    public class EventManager<T> : AutoGeneratedSingleton<EventManager<T>> where T : struct
    {
        private Dictionary<T, List<Action<T, object[]>>> m_events = new Dictionary<T, List<Action<T, object[]>>>();

        public EventManager(int expectedEventTypes, int expectedRegisterCalls)
        {

        }

        public EventManager()
            : this(20, 20)
        {
        }

        // NW: We cannot use single instances of arrays of each length because Event triggers might trigger inside other event triggers.
        // Using a single array would cause it to get overwritten, corrupting it.
        // We also use 3 different array pools (rather than just passing in m_reusableParams3Pool with 2 null arguments)
        // because some use-cases validate the length of the params.
        private readonly object[] m_reusableParam0 = new object[0];
        /// <summary>
        /// 注册事件
        /// </summary>
        /// <param name="eventType">事件名</param>
        /// <param name="listener">监听函数</param>
        public void RegisterEvent(T eventType, Action<T, object[]> listener)
        {
            List<Action<T, object[]>> list;
            if (!m_events.TryGetValue(eventType, out list))
            {
                list = new List<Action<T, object[]>>();
                list.Add(listener);
                m_events.Add(eventType, list);
            }
            else
            {
                if (!list.Contains(listener))
                {
                    list.Add(listener);
                }
            }
        }
        /// <summary>
        /// 发送事件
        /// </summary>
        /// <param name="eventType">事件名</param>
        /// <param name="optParams">参数</param>
        public void TriggerEvent(T eventType, params object[] optParams)
        {
            List<Action<T, object[]>> list;
            m_events.TryGetValue(eventType, out list);

            if (list != null)
            {
                if (list.Count == 0)
                {
                    m_events.Remove(eventType);
                    return;
                }

                foreach (var action in list)
                {
                    action(eventType, optParams);
                }
            }
        }
        /// <summary>
        /// 销毁事件
        /// </summary>
        /// <param name="eventType">事件名</param>
        /// <param name="listener">监听函数</param>
        public void DeregisterEvent(T eventType, Action<T, object[]> listener)
        {
            List<Action<T, object[]>> list;
            if (m_events.TryGetValue(eventType, out list))
            {
                list.Remove(listener);

                // NW: Really, we SHOULD log when we fail to remove, but it's spammy. 
                // Debug.LogWarning("EventManager (DeregisterEvent) :: (Harmless) Cannot remove listener as it's not in the list: " + eventType + ", " + listener.Target + "." + listener.Method);

                // Unregister the event itself and re-pool the list.
                // This should speed up event lookups and reduce memory.
                if (list.Count == 0)
                {
                    m_events.Remove(eventType);
                }
            }
        }
        /// <summary>
        /// 获取所以的注册事件
        /// </summary>
        /// <returns></returns>
        public Dictionary<T, List<Action<T, object[]>>> GetRegisteredEvents()
        {
            return m_events;
        }
    }
}
