using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Configuration;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml;
using TFramework.Singleton;

namespace TFramework.Utils
{
    public class ConfigurationUtils : AutoGeneratedSingleton<ConfigurationUtils>
    {
        enum AppConfigOperation
        {
            AddItemType,
            ModifyItemType,
            RemoveItemType,
        }

        private Configuration configuration = null;

        /// <summary>
        /// 获取当前 App.config 中 appSetting 的 key—value 值
        /// </summary>
        private AppSettingsSection m_appSetting = null;

        public ConfigurationUtils()
        {
            configuration = ConfigurationManager.OpenExeConfiguration(ConfigurationUserLevel.None);
            m_appSetting = configuration.AppSettings;
        }

        /// <summary>
        /// 获取当前 App.config 中 appSetting 的 key—value 值
        /// </summary>
        /// <param name="key">key 值</param>
        /// <returns></returns>
        public string GetAppSettingValue(string key, string defaultValue)
        {
            try
            {
                if (m_appSetting != null)
                {
                    string value = m_appSetting.Settings[key].Value ?? null;
                    if (value == null)
                    {
                        // add key
                        value = AddKey(key, defaultValue);
                    }
                    return value;
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(string.Format("GetAppSettingValue Error : {0} , key:{1}", e.Message, key));
            }

            return "";
        }

        /// <summary>
        /// 添加配置文件的项，键为keyName，值为keyValue
        /// </summary>
        /// <param name="keyName">key 值</param>
        /// <param name="keyValue">value 值</param>
        public string AddKey(string keyName, string defaultValue)
        {
            if (!ExistItem(keyName))
            {
                m_appSetting.Settings.Add(new KeyValueConfigurationElement(keyName, defaultValue));
            }
            return defaultValue;
        }

        /// <summary>
        /// 判断配置文件中是否存在键为keyName的项
        /// </summary>
        /// <param name="keyName">key 值</param>
        /// <returns>true 存在， false 不存在</returns>
        private bool ExistItem(string keyName)
        {
            foreach (string key in m_appSetting.Settings.AllKeys)
            {
                if (key == keyName)
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// 修改配置文件中键为keyName的项的值
        /// </summary>
        /// <param name="keyName">key 值</param>
        /// <param name="newKeyValue">value 值</param>
        public void UpdateKeyValue(string keyName, string keyValue)
        {
            if (ExistItem(keyName))
            {
                m_appSetting.Settings[keyName].Value = keyValue;
            }
        }

        /// <summary>
        /// 删除配置文件键为keyName的项
        /// </summary>
        /// <param name="keyName">key 值</param>
        public void RemoveKey(string keyName)
        {
            if (ExistItem(keyName))
            {
                m_appSetting.Settings.Remove(keyName);
            }
        }

        ~ConfigurationUtils()
        {
            configuration = null;
            m_appSetting = null;
        }
    }
}
